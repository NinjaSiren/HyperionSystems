/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package data.scripts.world;

import com.fs.starfarer.api.Global;
import com.fs.starfarer.api.campaign.PlanetAPI;
import com.fs.starfarer.api.campaign.StarSystemAPI;
import com.fs.starfarer.api.util.Misc;
import java.util.Random;

/**
 *
 * @author NinjaSiren
 */
public class HS_AutoGeneratePlanets {
    
    // Roll the dice, orbit radius
    private float rand_orbit(float minOR, float maxOR) {
        Random rand = new Random();
        return minOR + rand.nextFloat() * (maxOR - minOR);
    }
    
    // Roll the dice, orbital period
    private float rand_period(float minOP, float maxOP) {
        Random rand = new Random();
        return minOP + rand.nextFloat() * (maxOP - minOP);
    }
    
    // Roll the dice, orbital angle
    private int rand_angle() {
        Random rand = new Random();
        int minOA = 0;
        int maxOA = 360;
        return minOA + rand.nextInt(maxOA - minOA + 1);
    }
    
    // Autogenerates random planets
    public HS_AutoGeneratePlanets(StarSystemAPI system, PlanetAPI star, PlanetAPI[] planet, int planetAmount, 
            PlanetAPI[] stars, int starsAmount, float orbit_radius, float orbit_period, float minOrbitRadius, 
            float maxOrbitRadius, float minOrbitPeriod, float maxOrbitPeriod) {    
        int counter = 0;
        
        do {
            if(counter >= planetAmount) break;
            
            // Sets the current planet type
            String planetType = new HS_PlanetType().planetType(stars, starsAmount, planet, planetAmount, 
                    orbit_radius);
            
            // Sets the current planet size
            int planetSize = new HS_PlanetSize().planetSize(planetType);
            
            // Initiates the addition of the planet
            planet[counter] = system.addPlanet(
                    "hs_planet_" + counter, // Unique id for this planet (or null to have it be autogenerated)
                    star, // What the planet orbits (orbit is always circular)
                    "planet_" + counter, // Name
                    planetType, // Planet type id in planets.json
                    rand_angle(), // Starting angle in orbit, i.e. 0 = to the right of the star
                    planetSize, // Planet radius, pixels at default zoom
                    orbit_radius, // Orbit radius, pixels at default zoom
                    orbit_period); // Days it takes to complete an orbit. 1 day = 10 seconds.
            
            // Adds planet conditions
            Misc.initConditionMarket(planet[counter]);
            new HS_PlanetCondition(planetType, star, stars, starsAmount, orbit_radius, planet, counter, planetSize);
            
            // Adds the previous orbit radius with the current radius then adds a random number orbit
            orbit_radius = orbit_radius + rand_orbit(minOrbitRadius, maxOrbitRadius);
            
            // Adds the previous orbit period radius with the current radius then adds a random number 
            // orbit period
            orbit_period = orbit_period + (orbit_period * rand_period(minOrbitPeriod, maxOrbitPeriod));
            counter++;
        } while(counter < planetAmount + 1);
    }
}
