package data.scripts.world.systems;

import com.fs.starfarer.api.Global;
import com.fs.starfarer.api.campaign.JumpPointAPI;
import com.fs.starfarer.api.campaign.OrbitAPI;
import com.fs.starfarer.api.campaign.PlanetAPI;
import com.fs.starfarer.api.campaign.SectorAPI;
import com.fs.starfarer.api.campaign.SectorEntityToken;
import com.fs.starfarer.api.campaign.StarSystemAPI;
import com.fs.starfarer.api.campaign.econ.MarketAPI;
import com.fs.starfarer.api.impl.campaign.ids.Conditions;
import com.fs.starfarer.api.impl.campaign.ids.Entities;
import com.fs.starfarer.api.impl.campaign.ids.Factions;
import com.fs.starfarer.api.impl.campaign.ids.Industries;
import com.fs.starfarer.api.impl.campaign.ids.Submarkets;
import com.fs.starfarer.api.impl.campaign.ids.Terrain;
import com.fs.starfarer.api.impl.campaign.procgen.NebulaEditor;
import com.fs.starfarer.api.impl.campaign.procgen.ProcgenUsedNames;
import com.fs.starfarer.api.impl.campaign.terrain.HyperspaceTerrainPlugin;
import com.fs.starfarer.api.impl.campaign.terrain.MagneticFieldTerrainPlugin;
import com.fs.starfarer.api.util.Misc;
import data.scripts.HyperionModDependencies;
import data.scripts.world.procgen.HS_AbandonedStation;
import data.scripts.world.procgen.HS_AddIndustry;
import data.scripts.world.procgen.HS_AddMarketplace;
import data.scripts.world.procgen.HS_MarketTariff;
import data.scripts.world.procgen.HS_Randomizer;
import data.scripts.world.procgen.variables.PLANET_TYPES;
import data.scripts.world.procgen.variables.STAR_TYPES;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Arrays;

/**
 *
 * @author NinjaSiren
 */
public class HS_Neue_Jangala {
    
    // Sets a random star type if Unknown Skies is enabled
    private String star_type() {
        if(new HyperionModDependencies().hasUnknownSkies()) {
            return new STAR_TYPES().YELLOW_US;
        } else {
            return new STAR_TYPES().YELLOW;
        }
    }
    
    public void generate(SectorAPI sector) {
        
        // Add star system
        StarSystemAPI system = sector.createStarSystem("Neue Jangala");
        system.getLocation().set(-14350, -18900);
        system.setBackgroundTextureFilename("graphics/backgrounds/background5.jpg");
        ProcgenUsedNames.notifyUsed("Neue");

        // Add star
        PlanetAPI star = system.initStar(
                        "hs_neue_jangala", // unique id for this star
                        star_type(),  // id in planets.json
                        600f,           // radius (in pixels at default zoom)
                        800,            // corona radius, from star edge
                        4f,             // solar wind burn level
                        0.3f,           // flare probability
                        1.6f); 
        star.setCustomDescriptionId("hs_star_neuejangala");

        // Sets whole system lighting color (R, G, B)
        system.setLightColor(new Color(255,255,255,255));

        // Adds magnetic field effect around the star
        SectorEntityToken neue_jangala_mfield1 = system.addTerrain(
                Terrain.MAGNETIC_FIELD,
                new MagneticFieldTerrainPlugin.MagneticFieldParams(
                400f, // terrain effect band width
                1050, // terrain effect middle radius
                star, // entity that it's around
                850f, // visual band start
                1250f, // visual band end
                new Color(50, 30, 100, 30), // base color
                0.3f, // probability to spawn aurora sequence, checked once/day when no aurora in progress
                new Color(50, 20, 110, 130),
                new Color(150, 30, 120, 150),
                new Color(200, 50, 130, 190),
                new Color(250, 70, 150, 240),
                new Color(200, 80, 130, 255),
                new Color(75, 0, 160),
                new Color(127, 0, 255)));
        neue_jangala_mfield1.setCircularOrbit(star, 0, 0, 120);

        // Venusia, a large lava planet too close to the star
        PlanetAPI venusia;
        if(new HyperionModDependencies().hasUnknownSkies()) {
            venusia = system.addPlanet(
                    "hs_planet_venusia", //Unique id for this planet (or null to have it be autogenerated)
                    star, //What the planet orbits (orbit is always circular)
                    "Venusia", //Name
                    new PLANET_TYPES().US_LAVA, //Planet type id in planets.json
                    0, //Starting angle in orbit, i.e. 0 = to the right of the star
                    105, //Planet radius, pixels at default zoom
                    1400, //Orbit radius, pixels at default zoom
                    40); //Days it takes to complete an orbit. 1 day = 10 seconds.
        } else {
            venusia = system.addPlanet(
                    "hs_planet_venusia", //Unique id for this planet (or null to have it be autogenerated)
                    star, //What the planet orbits (orbit is always circular)
                    "Venusia", //Name
                    new PLANET_TYPES().LAVA, //Planet type id in planets.json
                    0, //Starting angle in orbit, i.e. 0 = to the right of the star
                    105, //Planet radius, pixels at default zoom
                    1400, //Orbit radius, pixels at default zoom
                    40); //Days it takes to complete an orbit. 1 day = 10 seconds.
        }
        venusia.getSpec().setGlowTexture(Global.getSettings().getSpriteName("hab_glows", "sindria"));
        venusia.getSpec().setGlowColor(new Color(255,255,255,255));
        venusia.getSpec().setUseReverseLightForGlow(true);
        venusia.applySpecChanges();
        venusia.setCustomDescriptionId("hs_planet_venusia");

        // Adds magnetic fields around Venusia
        SectorEntityToken venusia_field = system.addTerrain(Terrain.MAGNETIC_FIELD,
                        new MagneticFieldTerrainPlugin.MagneticFieldParams(60f, // terrain effect band width
                        120, // terrain effect middle radius
                        venusia, // entity that it's around
                        110f, // visual band start
                        160f, // visual band end
                        new Color(50, 30, 100, 30), // base color
                        0.6f, // probability to spawn aurora sequence, checked once/day when no aurora in progress
                        new Color(50, 20, 110, 130),
                        new Color(200, 50, 130, 190),
                        new Color(250, 70, 150, 240),
                        new Color(200, 80, 130, 255),
                        new Color(75, 0, 160),
                        new Color(127, 0, 255)
                        ));
        venusia_field.setCircularOrbit(venusia, 0, 0, 80);

            // Venusia conditions
            Misc.initConditionMarket(venusia);
            venusia.getMarket().addCondition(Conditions.DENSE_ATMOSPHERE);
            venusia.getMarket().addCondition(Conditions.TOXIC_ATMOSPHERE);
            venusia.getMarket().addCondition(Conditions.VERY_HOT);
            venusia.getMarket().addCondition(Conditions.EXTREME_TECTONIC_ACTIVITY);
            venusia.getMarket().addCondition(Conditions.RUINS_SCATTERED);
            venusia.getMarket().getFirstCondition(Conditions.RUINS_SCATTERED).setSurveyed(true);
            venusia.getMarket().addCondition(Conditions.ORE_ULTRARICH);
            venusia.getMarket().getFirstCondition(Conditions.ORE_ULTRARICH).setSurveyed(true);
            venusia.getMarket().addCondition(Conditions.RARE_ORE_ULTRARICH);
            venusia.getMarket().getFirstCondition(Conditions.RARE_ORE_ULTRARICH).setSurveyed(true);

        // Mercurios, a desert planet with alot of ores
        PlanetAPI mercurios;
        if(new HyperionModDependencies().hasUnknownSkies()) {   
            String pType = new PLANET_TYPES().US_DESERT_A;
            if(new HS_Randomizer().randFixed() <= 0.33) pType = new PLANET_TYPES().US_DESERT_B;
            else if(new HS_Randomizer().randFixed() > 0.33 && new HS_Randomizer().randFixed() <= 0.66) 
                pType = new PLANET_TYPES().US_DESERT_C;
            mercurios = system.addPlanet(
                    "hs_planet_mercurios", //Unique id for this planet (or null to have it be autogenerated)
                    star, //What the planet orbits (orbit is always circular)
                    "Mercurios", //Name
                    pType, //Planet type id in planets.json
                    58, //Starting angle in orbit, i.e. 0 = to the right of the star
                    145, //Planet radius, pixels at default zoom
                    2400, //Orbit radius, pixels at default zoom
                    52); //Days it takes to complete an orbit. 1 day = 10 seconds.
        } else {
            String pType = new PLANET_TYPES().DESERT_A;
            if(new HS_Randomizer().randFixed() > 0.5) pType = new PLANET_TYPES().DESERT_B;
            mercurios = system.addPlanet(
                    "hs_planet_mercurios", //Unique id for this planet (or null to have it be autogenerated)
                    star, //What the planet orbits (orbit is always circular)
                    "Mercurios", //Name
                    pType, //Planet type id in planets.json
                    58, //Starting angle in orbit, i.e. 0 = to the right of the star
                    145, //Planet radius, pixels at default zoom
                    2400, //Orbit radius, pixels at default zoom
                    52); //Days it takes to complete an orbit. 1 day = 10 seconds.
        }
        mercurios.getSpec().setGlowTexture(Global.getSettings().getSpriteName("hab_glows", "sindria"));
        mercurios.getSpec().setGlowColor(new Color(255,255,255,255));
        mercurios.getSpec().setUseReverseLightForGlow(true);
        mercurios.applySpecChanges();
        mercurios.setInteractionImage("illustrations", "urban03");
        mercurios.setCustomDescriptionId("hs_planet_mercurios");

        // Mercurios market
        MarketAPI mercuriosMarket = HS_AddMarketplace.addMarketplace("HS_Corporation_Separatist",
                    mercurios,
                    null,
                    "Mercurios", // name of the market
                    5, // size of the market (from the JSON)
                    new ArrayList<>(
                            Arrays.asList( // list of market conditions from nikolaev.json
                                    Conditions.HABITABLE,
                                    Conditions.HOT,
                                    Conditions.FARMLAND_POOR,
                                    Conditions.ORGANICS_COMMON,
                                    Conditions.ORE_ULTRARICH,
                                    Conditions.RARE_ORE_RICH,
                                    Conditions.URBANIZED_POLITY,
                                    Conditions.DESERT,
                                    Conditions.POPULATION_5)),
                    new ArrayList<>(
                            Arrays.asList( // list of industries
                                    Industries.WAYSTATION,
                                    Industries.MEGAPORT,
                                    Industries.HEAVYBATTERIES,
                                    Industries.PATROLHQ,
                                    Industries.POPULATION)),
                    new ArrayList<>(
                            Arrays.asList( // which submarkets to generate
                                    Submarkets.SUBMARKET_BLACK,
                                    Submarkets.SUBMARKET_OPEN,
                                    Submarkets.SUBMARKET_STORAGE)),
                    new HS_MarketTariff().tariff()); // tariff amount
        
                    // Adds industries depending on conditions
                    new HS_AddIndustry(mercurios, mercuriosMarket, mercuriosMarket.getFaction(), system);
                    
        // Adds magnetic field around Mercurios
        SectorEntityToken mercurios_field = system.addTerrain(Terrain.MAGNETIC_FIELD,
			new MagneticFieldTerrainPlugin.MagneticFieldParams(60f, // terrain effect band width
			175, // terrain effect middle radius
			mercurios, // entity that it's around
			155f, // visual band start
			195f, // visual band end
			new Color(50, 30, 100, 30), // base color
			0.6f, // probability to spawn aurora sequence, checked once/day when no aurora in progress
			new Color(50, 20, 110, 130),
			new Color(200, 50, 130, 190),
			new Color(250, 70, 150, 240),
			new Color(200, 80, 130, 255),
			new Color(75, 0, 160),
			new Color(127, 0, 255)
			));
        mercurios_field.setCircularOrbit(mercurios, 0, 0, 100);

        // Neue Jangala, home of the Hyperion Confederate capital
        PlanetAPI neuejangala;
        if(new HyperionModDependencies().hasUnknownSkies()) {
            neuejangala = system.addPlanet("hs_planet_neuejangala", //Unique id for this planet (or null to have it be autogenerated)
                    star, //What the planet orbits (orbit is always circular)
                    "Neue Jangala", //Name
                    new PLANET_TYPES().US_TERRAN, //Planet type id in planets.json
                    126, //Starting angle in orbit, i.e. 0 = to the right of the star
                    180, //Planet radius, pixels at default zoom
                    3600, //Orbit radius, pixels at default zoom
                    64); //Days it takes to complete an orbit. 1 day = 10 seconds.
        } else {
            neuejangala = system.addPlanet("hs_planet_neuejangala", //Unique id for this planet (or null to have it be autogenerated)
                    star, //What the planet orbits (orbit is always circular)
                    "Neue Jangala", //Name
                    new PLANET_TYPES().TERRAN, //Planet type id in planets.json
                    126, //Starting angle in orbit, i.e. 0 = to the right of the star
                    180, //Planet radius, pixels at default zoom
                    3600, //Orbit radius, pixels at default zoom
                    64); //Days it takes to complete an orbit. 1 day = 10 seconds.
        }
        neuejangala.getSpec().setGlowTexture(Global.getSettings().getSpriteName("hab_glows", "sindria"));
        neuejangala.getSpec().setGlowColor(new Color(255,255,255,255));
        neuejangala.getSpec().setUseReverseLightForGlow(true);
        neuejangala.applySpecChanges();
        neuejangala.setInteractionImage("illustrations", "urban01");
        neuejangala.setCustomDescriptionId("hs_planet_neuejangala");

            // Home sweet home port.
            SectorEntityToken station = system.addCustomEntity(
                    "neue_jangala_port",
                    "Neue Jangala Highport",
                    "station_jangala_type",
                    "HS_Corporation_Separatist");
            station.setCircularOrbitPointingDown(neuejangala, 45, 420, 45);
            station.setInteractionImage("illustrations", "orbital");
            station.setCustomDescriptionId("hs_neue_jangala_port");

            // add the marketplace to Neue Jangala and Neue Jangala Highport.
            MarketAPI neuejangalaMarket = HS_AddMarketplace.addMarketplace("HS_Corporation_Separatist",
                    neuejangala,
                    new ArrayList<>(Arrays.asList(station)),
                    "Neue Jangala", // name of the market
                    9, // size of the market (from the JSON)
                    new ArrayList<>(
                            Arrays.asList( // list of market conditions from nikolaev.json
                                    Conditions.HABITABLE,
                                    Conditions.MILD_CLIMATE,
                                    Conditions.FARMLAND_BOUNTIFUL,
                                    Conditions.ORGANICS_ABUNDANT,
                                    Conditions.ORE_MODERATE,
                                    Conditions.RARE_ORE_SPARSE,
                                    Conditions.URBANIZED_POLITY,
                                    Conditions.REGIONAL_CAPITAL,
                                    Conditions.TERRAN,
                                    Conditions.POPULATION_9)),
                    new ArrayList<>
                            (Arrays.asList( // list of industries
                                    Industries.STARFORTRESS_HIGH,
                                    Industries.HIGHCOMMAND,
                                    Industries.WAYSTATION,
                                    Industries.MEGAPORT,
                                    Industries.HEAVYBATTERIES,
                                    Industries.POPULATION)),
                    new ArrayList<>(
                            Arrays.asList( // which submarkets to generate
                                    Submarkets.GENERIC_MILITARY,
                                    Submarkets.SUBMARKET_BLACK,
                                    Submarkets.SUBMARKET_OPEN,
                                    Submarkets.SUBMARKET_STORAGE)),
                    new HS_MarketTariff().tariff()); // tariff amount

                    // Adds industries depending on conditions
                    new HS_AddIndustry(neuejangala, neuejangalaMarket, neuejangalaMarket.getFaction(), system);  
                    
        // Amazonia, super-earth sized jungle planet with alot of natural resources
        PlanetAPI amazonia;
        if(new HyperionModDependencies().hasUnknownSkies()) {
            amazonia = system.addPlanet("hs_planet_amazonia", //Unique id for this planet (or null to have it be autogenerated)
                    star, //What the planet orbits (orbit is always circular)
                    "Amazonia", //Name
                    new PLANET_TYPES().US_JUNGLE, //Planet type id in planets.json
                    178, //Starting angle in orbit, i.e. 0 = to the right of the star
                    240, //Planet radius, pixels at default zoom
                    5400, //Orbit radius, pixels at default zoom
                    76); //Days it takes to complete an orbit. 1 day = 10 seconds.
        } else {
            amazonia = system.addPlanet("hs_planet_amazonia", //Unique id for this planet (or null to have it be autogenerated)
                    star, //What the planet orbits (orbit is always circular)
                    "Amazonia", //Name
                    new PLANET_TYPES().JUNGLE, //Planet type id in planets.json
                    178, //Starting angle in orbit, i.e. 0 = to the right of the star
                    240, //Planet radius, pixels at default zoom
                    5400, //Orbit radius, pixels at default zoom
                    76); //Days it takes to complete an orbit. 1 day = 10 seconds.
        }
        amazonia.getSpec().setGlowTexture(Global.getSettings().getSpriteName("hab_glows", "sindria"));
        amazonia.getSpec().setGlowColor(new Color(255,255,255,255));
        amazonia.getSpec().setUseReverseLightForGlow(true);
        amazonia.applySpecChanges();
        amazonia.setInteractionImage("illustrations", "urban02");
        amazonia.setCustomDescriptionId("hs_planet_amazonia");

        // Amazonia market
        MarketAPI amazoniaMarket = HS_AddMarketplace.addMarketplace("HS_Corporation_Separatist",
                    amazonia,
                    null,
                    "Amazonia", // name of the market
                    7, // size of the market (from the JSON)
                    new ArrayList<>(
                            Arrays.asList( // list of market conditions from nikolaev.json
                                    Conditions.HABITABLE,
                                    Conditions.MILD_CLIMATE,
                                    Conditions.INIMICAL_BIOSPHERE,
                                    Conditions.FARMLAND_BOUNTIFUL,
                                    Conditions.ORGANICS_PLENTIFUL,
                                    Conditions.ORE_RICH,
                                    Conditions.RARE_ORE_MODERATE,
                                    Conditions.URBANIZED_POLITY,
                                    Conditions.JUNGLE,
                                    Conditions.POPULATION_7)),
                    new ArrayList<>
                            (Arrays.asList( // list of industries
                                    Industries.WAYSTATION,
                                    Industries.MEGAPORT,
                                    Industries.HEAVYBATTERIES,
                                    Industries.PATROLHQ,
                                    Industries.POPULATION)),
                    new ArrayList<>(
                            Arrays.asList( // which submarkets to generate
                                    Submarkets.SUBMARKET_BLACK,
                                    Submarkets.SUBMARKET_OPEN,
                                    Submarkets.SUBMARKET_STORAGE)),
                    new HS_MarketTariff().tariff()); // tariff amount
        
                    // Adds industries depending on conditions
                    new HS_AddIndustry(amazonia, amazoniaMarket, amazoniaMarket.getFaction(), system);
                    
        // Marutaina, a large gas giant with volatiles around
        PlanetAPI marutaina;
        if(new HyperionModDependencies().hasUnknownSkies()) {
            String pType = new PLANET_TYPES().US_GAS_GIANT_A;
            if(new HS_Randomizer().randFixed() > 0.5) pType = new PLANET_TYPES().US_GAS_GIANT_B;
            marutaina = system.addPlanet(
                    "hs_planet_marutaina",
                    star,
                    "Marutaina",
                    pType,
                    150,
                    520,
                    10800,
                    300);
        } else {
            marutaina = system.addPlanet("hs_planet_marutaina",
                    star,
                    "Marutaina",
                    new PLANET_TYPES().GAS_GIANT,
                    150,
                    520,
                    10800,
                    300);
        }
        marutaina.getSpec().setPlanetColor(new Color(255, 210, 180, 255));
        marutaina.getSpec().setAtmosphereColor(new Color(135, 45, 15, 135));
        marutaina.getSpec().setCloudColor(new Color(215, 215, 200, 200));
        marutaina.getSpec().setIconColor(new Color(155, 125, 75, 255));
        marutaina.getSpec().setGlowTexture(Global.getSettings().getSpriteName("hab_glows", "aurorae"));
        marutaina.getSpec().setGlowColor(new Color(255,255,255,255));
        marutaina.getSpec().setUseReverseLightForGlow(true);
        marutaina.getSpec().setAtmosphereThickness(0.6f);
        marutaina.applySpecChanges();
        marutaina.setCustomDescriptionId("hs_planet_marutaina");

        // Marutania's dual magnetic fields
        SectorEntityToken marutaina_field1 = system.addTerrain(Terrain.MAGNETIC_FIELD,
                new MagneticFieldTerrainPlugin.MagneticFieldParams(200f, // terrain effect band width
                        625, // terrain effect middle radius
                        marutaina, // entity that it's around
                        525f, // visual band start
                        725f, // visual band end
                        new Color(50, 30, 100, 60), // base color
                        1f, // probability to spawn aurora sequence, checked once/day when no aurora in progress
                        new Color(50, 20, 110, 135),
                        new Color(150, 30, 120, 150),
                        new Color(200, 50, 130, 190),
                        new Color(250, 70, 150, 240),
                        new Color(200, 80, 130, 255),
                        new Color(75, 0, 160),
                        new Color(127, 0, 255)
                ));
        marutaina_field1.setCircularOrbit(marutaina, 0, 0, 100);

        SectorEntityToken marutaina_field2 = system.addTerrain(Terrain.MAGNETIC_FIELD,
                new MagneticFieldTerrainPlugin.MagneticFieldParams(400f, // terrain effect band width
                        900, // terrain effect middle radius
                        marutaina, // entity that it's around
                        700f, // visual band start
                        1100f, // visual band end
                        new Color(50, 30, 100, 30), // base color
                        0.3f, // probability to spawn aurora sequence, checked once/day when no aurora in progress
                        new Color(50, 20, 110, 135),
                        new Color(150, 30, 120, 150),
                        new Color(200, 50, 130, 190),
                        new Color(250, 70, 150, 240),
                        new Color(200, 80, 130, 255),
                        new Color(75, 0, 160),
                        new Color(127, 0, 255)
                ));
        marutaina_field2.setCircularOrbit(marutaina, 0, 0, 100);

            // Marutainia conditions
            Misc.initConditionMarket(marutaina);
            marutaina.getMarket().addCondition(Conditions.DENSE_ATMOSPHERE);
            marutaina.getMarket().addCondition(Conditions.HIGH_GRAVITY);
            marutaina.getMarket().addCondition(Conditions.ABANDONED_STATION);
            marutaina.getMarket().addCondition(Conditions.VOLATILES_PLENTIFUL);
            marutaina.getMarket().getFirstCondition(Conditions.VOLATILES_PLENTIFUL).setSurveyed(true);

        // Marutaina's ring system
        system.addRingBand(marutaina, "misc", "rings_ice0", 256f, 2, Color.white, 256f, 1520, 70f);
        system.addRingBand(marutaina, "misc", "rings_dust0", 256f, 2, Color.white, 256f, 1500, 80f);
        system.addRingBand(marutaina, "misc", "rings_ice0", 256f, 1, Color.white, 256f, 1445, 90f);

        // Marutainia's moons
        // Titania, an Io-like volcanic hellhole.
        PlanetAPI titania;
        if(new HyperionModDependencies().hasUnknownSkies()) {
            titania = system.addPlanet("hs_planet_titania",
                    marutaina,
                    "Titania",
                    new PLANET_TYPES().US_LAVA,
                    36,
                    90,
                    960,
                    45);
        } else {
            String pType = new PLANET_TYPES().LAVA;
            if(new HS_Randomizer().randFixed() > 0.5) pType = new PLANET_TYPES().LAVA_MINOR;
            titania = system.addPlanet(
                    "hs_planet_titania",
                    marutaina,
                    "Titania",
                    pType,
                    36,
                    90,
                    960,
                    45);
        }
        titania.setCustomDescriptionId("hs_planet_titania");
        titania.getSpec().setPlanetColor(new Color(220, 245, 255, 255));
        titania.getSpec().setGlowTexture(Global.getSettings().getSpriteName("hab_glows", "sindria"));
        titania.getSpec().setGlowColor(new Color(255,255,255,255));
        titania.getSpec().setUseReverseLightForGlow(true);
        titania.applySpecChanges();

        // Titania's magnetic field
        SectorEntityToken titania_field = system.addTerrain(Terrain.MAGNETIC_FIELD,
                new MagneticFieldTerrainPlugin.MagneticFieldParams(90f, // terrain effect band width
                110, // terrain effect middle radius
                titania, // entity that it's around
                95f, // visual band start
                145f, // visual band end
                new Color(50, 30, 100, 60), // base color
                0.6f, // probability to spawn aurora sequence, checked once/day when no aurora in progress
                new Color(50, 20, 110, 130),
                new Color(200, 50, 130, 190),
                new Color(250, 70, 150, 240),
                new Color(200, 80, 130, 255),
                new Color(75, 0, 160),
                new Color(127, 0, 255)
                ));
        titania_field.setCircularOrbit(titania, 0, 0, 100);

            // Titania conditions
            Misc.initConditionMarket(titania);
            titania.getMarket().addCondition(Conditions.DENSE_ATMOSPHERE);
            titania.getMarket().addCondition(Conditions.TOXIC_ATMOSPHERE);
            titania.getMarket().addCondition(Conditions.IRRADIATED);
            titania.getMarket().addCondition(Conditions.VERY_HOT);
            titania.getMarket().addCondition(Conditions.EXTREME_TECTONIC_ACTIVITY);
            titania.getMarket().addCondition(Conditions.VOLATILES_DIFFUSE);
            titania.getMarket().getFirstCondition(Conditions.VOLATILES_DIFFUSE).setSurveyed(true);
            titania.getMarket().addCondition(Conditions.ORE_ULTRARICH);
            titania.getMarket().getFirstCondition(Conditions.ORE_ULTRARICH).setSurveyed(true);
            titania.getMarket().addCondition(Conditions.RARE_ORE_ULTRARICH);
            titania.getMarket().getFirstCondition(Conditions.RARE_ORE_ULTRARICH).setSurveyed(true);

        // Sedinia, a barren shithole of little value.
        PlanetAPI sedina;
        if(new HyperionModDependencies().hasUnknownSkies()) {
            String pType = new PLANET_TYPES().US_BARREN_A;
            if(new HS_Randomizer().randFixed() <= 0.167) pType = new PLANET_TYPES().US_BARREN_B;
            else if(new HS_Randomizer().randFixed() > 0.167 && new HS_Randomizer().randFixed() <= 0.334) 
                pType = new PLANET_TYPES().US_BARREN_C;
            else if(new HS_Randomizer().randFixed() > 0.334 && new HS_Randomizer().randFixed() <= 0.501) 
                pType = new PLANET_TYPES().US_BARREN_D;
            else if(new HS_Randomizer().randFixed() > 0.501 && new HS_Randomizer().randFixed() <= 0.668) 
                pType = new PLANET_TYPES().US_BARREN_E;
            else if(new HS_Randomizer().randFixed() > 0.668 && new HS_Randomizer().randFixed() <= 0.835) 
                pType = new PLANET_TYPES().US_BARREN_F;
            sedina = system.addPlanet(
                    "hs_planet_sedinia",
                    marutaina,
                    "Sedinia",
                    pType,
                    180,
                    120,
                    2100,
                    80);
        } else {
            String pType = new PLANET_TYPES().BARREN_A;
            if(new HS_Randomizer().randFixed() <= 0.33) pType = new PLANET_TYPES().BARREN_B;
            else if(new HS_Randomizer().randFixed() > 0.33 && new HS_Randomizer().randFixed() <= 0.66) 
                pType = new PLANET_TYPES().BARREN_C;
            sedina = system.addPlanet(
                    "hs_planet_sedinia",
                    marutaina,
                    "Sedinia",
                    pType,
                    180,
                    120,
                    2100,
                    80);
        }
        sedina.getSpec().setPlanetColor(new Color(220, 245, 255, 255));
        sedina.getSpec().setGlowTexture(Global.getSettings().getSpriteName("hab_glows", "sindria"));
        sedina.getSpec().setGlowColor(new Color(255,255,255,255));
        sedina.getSpec().setUseReverseLightForGlow(true);
        sedina.applySpecChanges();
        sedina.setCustomDescriptionId("hs_planet_sedinia");
        sedina.setInteractionImage("illustrations", "urban00");

        // Sedinia Freeport.
        SectorEntityToken pirateStation = system.addCustomEntity(
                "hs_pirateport",
                "Sedinia Freeport",
                "station_pirate_type",
                Factions.PIRATES);
        pirateStation.setCircularOrbitPointingDown(sedina, 45, 420, 45);
        pirateStation.setInteractionImage("illustrations", "pirate_station");

        // Sedinia market
        MarketAPI sedinaMarket = HS_AddMarketplace.addMarketplace(Factions.PIRATES,
                    sedina,
                    new ArrayList<>(Arrays.asList(pirateStation)),
                    "Sedinia", // name of the market
                    5, // size of the market (from the JSON)
                    new ArrayList<>(
                            Arrays.asList( // list of market conditions from nikolaev.json
                                    Conditions.NO_ATMOSPHERE,
                                    Conditions.VERY_COLD,
                                    Conditions.ORGANIZED_CRIME,
                                    Conditions.DECIVILIZED_SUBPOP,
                                    Conditions.VOLATILES_ABUNDANT,
                                    Conditions.ORE_ULTRARICH,
                                    Conditions.RARE_ORE_RICH,
                                    Conditions.FREE_PORT,
                                    Conditions.VICE_DEMAND,
                                    Conditions.INDUSTRIAL_POLITY,
                                    Conditions.STEALTH_MINEFIELDS,
                                    Conditions.POPULATION_5)),
                    new ArrayList<>
                            (Arrays.asList( // list of industries
                                    Industries.BATTLESTATION,
                                    Industries.MILITARYBASE,
                                    Industries.WAYSTATION,
                                    Industries.MEGAPORT,
                                    Industries.HEAVYBATTERIES,
                                    Industries.POPULATION)),
                    new ArrayList<>(
                            Arrays.asList( // which submarkets to generate
                                    Submarkets.SUBMARKET_BLACK,
                                    Submarkets.SUBMARKET_OPEN,
                                    Submarkets.SUBMARKET_STORAGE)),
                    new HS_MarketTariff().tariff()); // tariff amount
        
                    // Adds industries depending on conditions
                    new HS_AddIndustry(sedina, sedinaMarket, sedinaMarket.getFaction(), system);
                    
        // Mirar, a large planet with alot of volatiles
        PlanetAPI mirar;
        if(new HyperionModDependencies().hasUnknownSkies()) {
            mirar = system.addPlanet("hs_planet_mirar",
                star,
                "Mirar",
                new PLANET_TYPES().US_CRYOVOLCANIC,
                210,
                310,
                14200,
                340);
        } else {
            mirar = system.addPlanet("hs_planet_mirar",
                star,
                "Mirar",
                new PLANET_TYPES().CRYOVOLCANIC,
                210,
                310,
                14200,
                340);
        }
        mirar.setCustomDescriptionId("hs_planet_mirar");
        mirar.getSpec().setPlanetColor(new Color(220, 245, 255, 255));
        mirar.getSpec().setGlowTexture(Global.getSettings().getSpriteName("hab_glows", "sindria"));
        mirar.getSpec().setGlowColor(new Color(255,255,255,255));
        mirar.getSpec().setUseReverseLightForGlow(true);
        mirar.applySpecChanges();
        mirar.setInteractionImage("illustrations", "industrial_megafacility");

            // Mirar market
            MarketAPI mirarMarket = HS_AddMarketplace.addMarketplace("HS_Corporation_Separatist",
                        mirar,
                        null,
                        "Mirar", // name of the market
                        6, // size of the market (from the JSON)
                        new ArrayList<>(
                                Arrays.asList( // list of market conditions from nikolaev.json
                                        Conditions.THIN_ATMOSPHERE,
                                        Conditions.VERY_COLD,
                                        Conditions.HIGH_GRAVITY,
                                        Conditions.RUINS_SCATTERED,
                                        Conditions.VOLATILES_PLENTIFUL,
                                        Conditions.ORE_RICH,
                                        Conditions.RARE_ORE_ABUNDANT,
                                        Conditions.INDUSTRIAL_POLITY,
                                        Conditions.POPULATION_6)),
                        new ArrayList<>
                                (Arrays.asList( // list of industries
                                        Industries.HIGHCOMMAND,
                                        Industries.WAYSTATION,
                                        Industries.MEGAPORT,
                                        Industries.HEAVYBATTERIES,
                                        Industries.POPULATION)),
                        new ArrayList<>(
                                Arrays.asList( // which submarkets to generate
                                        Submarkets.GENERIC_MILITARY,
                                        Submarkets.SUBMARKET_BLACK,
                                        Submarkets.SUBMARKET_OPEN,
                                        Submarkets.SUBMARKET_STORAGE)),
                        new HS_MarketTariff().tariff()); // tariff amount
            
                        // Adds industries depending on conditions
                        new HS_AddIndustry(mirar, mirarMarket, mirarMarket.getFaction(), system);
                        
        //Dust and asteroid belts
        // Inner asteroid belt
        system.addAsteroidBelt(
                star, // Star or planet that it orbits
                100, // Number of asteroids
                3000, // orbit radius
                500, // belt width
                54, // minimum orbit days
                64, // maximum orbit days
                Terrain.ASTEROID_BELT, // terrain ID
                "Neue Inner Belt"); // belt name
        system.addRingBand(star,
                "misc", "rings_asteroids0", 256f, 0, Color.white, 256f, 2750, 201f, null, null);
        system.addRingBand(star,
                "misc", "rings_asteroids0", 256f, 1, Color.white, 256f, 2850, 225f, null, null);

        // Outer asteroid belt
        system.addAsteroidBelt(
                star, // Star or planet that it orbits
                100, // Number of asteroids
                4200, // orbit radius
                500, // belt width
                64, // minimum orbit days
                74, // maximum orbit days
                Terrain.ASTEROID_BELT, // terrain ID
                "Neue Outer Belt"); // belt name
        system.addRingBand(star,
                "misc", "rings_asteroids0", 256f, 0, Color.white, 256f, 4500, 201f, null, null);
        system.addRingBand(star,
                "misc", "rings_asteroids0", 256f, 1, Color.white, 256f, 4600, 225f, null, null);

        // Jump points
        // Inner jump point
        JumpPointAPI inner_jp = Global.getFactory().createJumpPoint(
                "inner_jp", "Neue Jangala Inner Jump Point");
        OrbitAPI orbit_1 = Global.getFactory().createCircularOrbit(star, 126, 1900, 46);
        inner_jp.setOrbit(orbit_1);
        inner_jp.setStandardWormholeToHyperspaceVisual();
        system.addEntity(inner_jp);

        // Neue Jangala jump point
        JumpPointAPI neue_jp = Global.getFactory().createJumpPoint(
                "neue_jp", "Neue Jangala Central Jump Point");
        OrbitAPI orbit_2 = Global.getFactory().createCircularOrbit(star, 152, 3600, 64);
        neue_jp.setOrbit(orbit_2);
        neue_jp.setRelatedPlanet(neuejangala);
        neue_jp.setStandardWormholeToHyperspaceVisual();
        system.addEntity(neue_jp);
        
        // Outer jump point
        JumpPointAPI outer_jp = Global.getFactory().createJumpPoint(
                "outer_jp", "Neue Jangala Outer Jump Point");
        OrbitAPI orbit_3 = Global.getFactory().createCircularOrbit(star, 253, 8050, 112);
        outer_jp.setOrbit(orbit_3);
        outer_jp.setStandardWormholeToHyperspaceVisual();
        system.addEntity(outer_jp);

        /* Autogenerated jump points
        *
        *  boolean generateEntrancesAtGasGiants, 
        *  boolean generateFringeJumpPoint, 
        *  boolean generatePlanetConditions
        */
        system.autogenerateHyperspaceJumpPoints(true, true, true);

        //Nav Buoy
        SectorEntityToken nav_buoy = system.addCustomEntity(
                "neue_jangala_navbuoy",
                "Neue Jangala Nav Buoy",
                Entities.NAV_BUOY,
                "HS_Corporation_Separatist");
        nav_buoy.setCircularOrbit(star, 89, 2750, 56);

        //Comm Relay
        SectorEntityToken comm_relay = system.addCustomEntity(
                "neue_jangala_commrelay",
                "Neue Jangala Relay",
                Entities.COMM_RELAY,
                "HS_Corporation_Separatist");
        comm_relay.setCircularOrbit(star, 168, 4800, 70);

        //Sensor Array
        SectorEntityToken sensor_array = system.addCustomEntity(
                "neue_jangala_sensorarray",
                "Neue Jangala Sensor Array",
                Entities.SENSOR_ARRAY,
                "HS_Corporation_Separatist");
        sensor_array.setCircularOrbit(star, 320, 14700, 380);

        //Inactive Gate
        SectorEntityToken inactive_gate = system.addCustomEntity(
                "neue_jangala_gate",
                "Neue Jangala Gate",
                "inactive_gate",
                null);
        inactive_gate.setCircularOrbit(marutaina, 200, 1140, 63);

        //Other stations
        new HS_AbandonedStation(system, star, mirar);

        // Cleaning the hyperspace
        HyperspaceTerrainPlugin plugin =
                (HyperspaceTerrainPlugin) Misc.getHyperspaceTerrain().getPlugin();
        NebulaEditor editor = new NebulaEditor(plugin);
        float minRadius = plugin.getTileSize() * 2f;

        float radius = system.getMaxRadiusInHyperspace();
        editor.clearArc(system.getLocation().x, system.getLocation().y, 0,
                radius + minRadius * 0.5f, 0, 360f);
        editor.clearArc(system.getLocation().x, system.getLocation().y, 0,
                radius + minRadius, 0, 360f, 0.25f);
    }
}
